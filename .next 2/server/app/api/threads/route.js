"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/threads/route";
exports.ids = ["app/api/threads/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("sqlite3");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Froute&page=%2Fapi%2Fthreads%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Froute.ts&appDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Froute&page=%2Fapi%2Fthreads%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Froute.ts&appDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_riciboy_Desktop_galadarbinsskola_app_api_threads_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/threads/route.ts */ \"(rsc)/./app/api/threads/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/threads/route\",\n        pathname: \"/api/threads\",\n        filename: \"route\",\n        bundlePath: \"app/api/threads/route\"\n    },\n    resolvedPagePath: \"/Users/riciboy/Desktop/galadarbinsskola/app/api/threads/route.ts\",\n    nextConfigOutput,\n    userland: _Users_riciboy_Desktop_galadarbinsskola_app_api_threads_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/threads/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0aHJlYWRzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0aHJlYWRzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdGhyZWFkcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJpY2lib3klMkZEZXNrdG9wJTJGZ2FsYWRhcmJpbnNza29sYSUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZyaWNpYm95JTJGRGVza3RvcCUyRmdhbGFkYXJiaW5zc2tvbGEmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhyZWFkcy1hcHAtYmVldC8/N2NlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvcmljaWJveS9EZXNrdG9wL2dhbGFkYXJiaW5zc2tvbGEvYXBwL2FwaS90aHJlYWRzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS90aHJlYWRzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdGhyZWFkc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdGhyZWFkcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9yaWNpYm95L0Rlc2t0b3AvZ2FsYWRhcmJpbnNza29sYS9hcHAvYXBpL3RocmVhZHMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3RocmVhZHMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Froute&page=%2Fapi%2Fthreads%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Froute.ts&appDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/auth/db.js":
/*!****************************!*\
  !*** ./app/api/auth/db.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst db = __webpack_require__(/*! ../../../database/db */ \"(rsc)/./database/db.js\");\nconst bcrypt = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key\";\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"7d\";\n// User authentication functions\nconst createUser = async (userData)=>{\n    const { username, displayName, email, password, avatar, bio } = userData;\n    try {\n        // Check if user already exists\n        const existingUser = await getUserByEmail(email);\n        if (existingUser) {\n            throw new Error(\"User with this email already exists\");\n        }\n        const existingUsername = await getUserByUsername(username);\n        if (existingUsername) {\n            throw new Error(\"Username already taken\");\n        }\n        // Hash password\n        const passwordHash = await bcrypt.hash(password, 12);\n        const userId = crypto.randomUUID();\n        // Create user\n        const result = await db.query(`\n      INSERT INTO users (id, username, display_name, email, password_hash, avatar, bio)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `, [\n            userId,\n            username,\n            displayName,\n            email,\n            passwordHash,\n            avatar || null,\n            bio || null\n        ]);\n        // Return user without password\n        const newUser = await getUserById(userId);\n        return newUser;\n    } catch (error) {\n        console.error(\"Error creating user:\", error);\n        throw error;\n    }\n};\nconst getUserByEmail = async (email)=>{\n    try {\n        const result = await db.get(\"SELECT * FROM users WHERE email = ?\", [\n            email\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error(\"Error getting user by email:\", error);\n        throw error;\n    }\n};\nconst getUserByUsername = async (username)=>{\n    try {\n        const result = await db.get(\"SELECT * FROM users WHERE username = ?\", [\n            username\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error(\"Error getting user by username:\", error);\n        throw error;\n    }\n};\nconst getUserById = async (id)=>{\n    try {\n        const result = await db.get(\"SELECT * FROM users WHERE id = ?\", [\n            id\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error(\"Error getting user by ID:\", error);\n        throw error;\n    }\n};\nconst getAllUsers = async ()=>{\n    try {\n        const result = await db.query(`\n      SELECT \n        id, username, display_name, email, avatar, bio, \n        created_at, following, followers\n      FROM users\n      ORDER BY created_at DESC\n    `);\n        return result.rows;\n    } catch (error) {\n        console.error(\"Error getting all users:\", error);\n        throw error;\n    }\n};\nconst updateUser = async (id, updateData)=>{\n    try {\n        const { username, displayName, email, avatar, bio, following, followers } = updateData;\n        // Check if username is taken by another user\n        if (username) {\n            const existingUser = await getUserByUsername(username);\n            if (existingUser && existingUser.id !== id) {\n                throw new Error(\"Username already taken\");\n            }\n        }\n        // Check if email is taken by another user\n        if (email) {\n            const existingUser = await getUserByEmail(email);\n            if (existingUser && existingUser.id !== id) {\n                throw new Error(\"Email already taken\");\n            }\n        }\n        await db.query(`\n      UPDATE users \n      SET username = COALESCE(?, username),\n          display_name = COALESCE(?, display_name),\n          email = COALESCE(?, email),\n          avatar = COALESCE(?, avatar),\n          bio = COALESCE(?, bio),\n          following = COALESCE(?, following),\n          followers = COALESCE(?, followers),\n          updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `, [\n            username,\n            displayName,\n            email,\n            avatar,\n            bio,\n            following,\n            followers,\n            id\n        ]);\n        return await getUserById(id);\n    } catch (error) {\n        console.error(\"Error updating user:\", error);\n        throw error;\n    }\n};\nconst deleteUser = async (id)=>{\n    try {\n        await db.query(\"DELETE FROM users WHERE id = ?\", [\n            id\n        ]);\n        await db.query(\"DELETE FROM user_sessions WHERE user_id = ?\", [\n            id\n        ]);\n        return true;\n    } catch (error) {\n        console.error(\"Error deleting user:\", error);\n        throw error;\n    }\n};\nconst verifyUserPassword = async (email, password)=>{\n    try {\n        const user = await getUserByEmail(email);\n        if (!user) {\n            return null;\n        }\n        const isValid = await bcrypt.compare(password, user.password_hash);\n        return isValid ? user : null;\n    } catch (error) {\n        console.error(\"Error verifying password:\", error);\n        throw error;\n    }\n};\n// JWT token functions\nconst generateToken = (user)=>{\n    const payload = {\n        id: user.id,\n        email: user.email,\n        username: user.username\n    };\n    return jwt.sign(payload, JWT_SECRET, {\n        expiresIn: JWT_EXPIRES_IN\n    });\n};\nconst verifyToken = (token)=>{\n    try {\n        return jwt.verify(token, JWT_SECRET);\n    } catch (error) {\n        return null;\n    }\n};\n// Session management\nconst createSession = async (userId, token, ipAddress, userAgent)=>{\n    try {\n        const sessionId = crypto.randomUUID();\n        const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n        await db.query(`\n      INSERT INTO user_sessions (id, user_id, session_token, expires_at)\n      VALUES (?, ?, ?, ?)\n    `, [\n            sessionId,\n            userId,\n            token,\n            expiresAt.toISOString()\n        ]);\n        return sessionId;\n    } catch (error) {\n        console.error(\"Error creating session:\", error);\n        throw error;\n    }\n};\nconst getSession = async (token)=>{\n    try {\n        const result = await db.get(`\n      SELECT s.*, u.id as user_id, u.username, u.display_name, u.email, u.avatar, u.bio\n      FROM user_sessions s\n      JOIN users u ON s.user_id = u.id\n      WHERE s.session_token = ? AND s.expires_at > datetime('now')\n    `, [\n            token\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error(\"Error getting session:\", error);\n        throw error;\n    }\n};\nconst deleteSession = async (token)=>{\n    try {\n        await db.query(\"DELETE FROM user_sessions WHERE session_token = ?\", [\n            token\n        ]);\n        return true;\n    } catch (error) {\n        console.error(\"Error deleting session:\", error);\n        throw error;\n    }\n};\nconst deleteAllUserSessions = async (userId)=>{\n    try {\n        await db.query(\"DELETE FROM user_sessions WHERE user_id = ?\", [\n            userId\n        ]);\n        return true;\n    } catch (error) {\n        console.error(\"Error deleting user sessions:\", error);\n        throw error;\n    }\n};\nmodule.exports = {\n    createUser,\n    getUserByEmail,\n    getUserByUsername,\n    getUserById,\n    getAllUsers,\n    updateUser,\n    deleteUser,\n    verifyUserPassword,\n    generateToken,\n    verifyToken,\n    createSession,\n    getSession,\n    deleteSession,\n    deleteAllUserSessions\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/db.js\n");

/***/ }),

/***/ "(rsc)/./app/api/threads/db.js":
/*!*******************************!*\
  !*** ./app/api/threads/db.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst db = __webpack_require__(/*! ../../../database/db */ \"(rsc)/./database/db.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n// Thread functions\nconst createThread = async (threadData)=>{\n    const { authorId, content, visibility, parentId, attachments, groupId, topicDayId } = threadData;\n    try {\n        const threadId = crypto.randomUUID();\n        await db.query(`\n      INSERT INTO threads (id, author_id, content, parent_id, group_id, topic_day_id, visibility, attachments)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n            threadId,\n            authorId,\n            content,\n            parentId || null,\n            groupId || null,\n            topicDayId || null,\n            visibility || \"public\",\n            JSON.stringify(attachments || [])\n        ]);\n        return await getThreadById(threadId);\n    } catch (error) {\n        console.error(\"Error creating thread:\", error);\n        throw error;\n    }\n};\nconst getThreadById = async (id)=>{\n    try {\n        const result = await db.get(`\n      SELECT \n        t.id, t.author_id, t.content, t.parent_id, t.group_id, t.topic_day_id,\n        t.visibility, t.attachments, t.likes, t.dislikes, t.created_at, t.updated_at,\n        u.username, u.display_name, u.avatar\n      FROM threads t\n      JOIN users u ON t.author_id = u.id\n      WHERE t.id = ?\n    `, [\n            id\n        ]);\n        if (!result.rows[0]) {\n            return null;\n        }\n        const thread = result.rows[0];\n        return {\n            ...thread,\n            likes: JSON.parse(thread.likes || \"[]\"),\n            dislikes: JSON.parse(thread.dislikes || \"[]\"),\n            attachments: JSON.parse(thread.attachments || \"[]\"),\n            author: {\n                id: thread.author_id,\n                username: thread.username,\n                displayName: thread.display_name,\n                avatar: thread.avatar\n            }\n        };\n    } catch (error) {\n        console.error(\"Error getting thread by ID:\", error);\n        throw error;\n    }\n};\nconst getAllThreads = async (options = {})=>{\n    const { limit = 50, offset = 0, userId = null } = options;\n    try {\n        let query = `\n      SELECT \n        t.id, t.author_id, t.content, t.parent_id, t.group_id, t.topic_day_id,\n        t.visibility, t.attachments, t.likes, t.dislikes, t.created_at, t.updated_at,\n        u.username, u.display_name, u.avatar\n      FROM threads t\n      JOIN users u ON t.author_id = u.id\n      WHERE t.parent_id IS NULL\n    `;\n        const params = [];\n        if (userId) {\n            query += \" AND t.author_id = ?\";\n            params.push(userId);\n        }\n        query += \" ORDER BY t.created_at DESC LIMIT ? OFFSET ?\";\n        params.push(limit, offset);\n        const result = await db.query(query, params);\n        const threads = result.rows.map((thread)=>({\n                ...thread,\n                likes: JSON.parse(thread.likes || \"[]\"),\n                dislikes: JSON.parse(thread.dislikes || \"[]\"),\n                attachments: JSON.parse(thread.attachments || \"[]\"),\n                author: {\n                    id: thread.author_id,\n                    username: thread.username,\n                    displayName: thread.display_name,\n                    avatar: thread.avatar\n                },\n                replies: [],\n                comments: []\n            }));\n        // Get replies for each thread\n        for (const thread of threads){\n            const replies = await getThreadReplies(thread.id);\n            thread.replies = replies;\n        }\n        return threads;\n    } catch (error) {\n        console.error(\"Error getting all threads:\", error);\n        throw error;\n    }\n};\nconst getThreadReplies = async (parentId)=>{\n    try {\n        const result = await db.query(`\n      SELECT \n        t.id, t.author_id, t.content, t.parent_id, t.group_id, t.topic_day_id,\n        t.visibility, t.attachments, t.likes, t.dislikes, t.created_at, t.updated_at,\n        u.username, u.display_name, u.avatar\n      FROM threads t\n      JOIN users u ON t.author_id = u.id\n      WHERE t.parent_id = ?\n      ORDER BY t.created_at ASC\n    `, [\n            parentId\n        ]);\n        return result.rows.map((thread)=>({\n                ...thread,\n                likes: JSON.parse(thread.likes || \"[]\"),\n                dislikes: JSON.parse(thread.dislikes || \"[]\"),\n                attachments: JSON.parse(thread.attachments || \"[]\"),\n                author: {\n                    id: thread.author_id,\n                    username: thread.username,\n                    displayName: thread.display_name,\n                    avatar: thread.avatar\n                }\n            }));\n    } catch (error) {\n        console.error(\"Error getting thread replies:\", error);\n        throw error;\n    }\n};\nconst updateThread = async (id, updateData)=>{\n    try {\n        const { content, visibility, attachments } = updateData;\n        await db.query(`\n      UPDATE threads \n      SET content = COALESCE(?, content),\n          visibility = COALESCE(?, visibility),\n          attachments = COALESCE(?, attachments),\n          updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `, [\n            content,\n            visibility,\n            attachments ? JSON.stringify(attachments) : null,\n            id\n        ]);\n        return await getThreadById(id);\n    } catch (error) {\n        console.error(\"Error updating thread:\", error);\n        throw error;\n    }\n};\nconst deleteThread = async (id)=>{\n    try {\n        await db.query(\"DELETE FROM threads WHERE id = ?\", [\n            id\n        ]);\n        await db.query(\"DELETE FROM threads WHERE parent_id = ?\", [\n            id\n        ]); // Delete replies\n        return true;\n    } catch (error) {\n        console.error(\"Error deleting thread:\", error);\n        throw error;\n    }\n};\nconst likeThread = async (threadId, userId)=>{\n    try {\n        const thread = await getThreadById(threadId);\n        if (!thread) {\n            throw new Error(\"Thread not found\");\n        }\n        let likes = thread.likes || [];\n        let dislikes = thread.dislikes || [];\n        // Remove from dislikes if present\n        dislikes = dislikes.filter((id)=>id !== userId);\n        // Add to likes if not already present\n        if (!likes.includes(userId)) {\n            likes.push(userId);\n        }\n        await db.query(`\n      UPDATE threads \n      SET likes = ?, dislikes = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `, [\n            JSON.stringify(likes),\n            JSON.stringify(dislikes),\n            threadId\n        ]);\n        return await getThreadById(threadId);\n    } catch (error) {\n        console.error(\"Error liking thread:\", error);\n        throw error;\n    }\n};\nconst unlikeThread = async (threadId, userId)=>{\n    try {\n        const thread = await getThreadById(threadId);\n        if (!thread) {\n            throw new Error(\"Thread not found\");\n        }\n        let likes = thread.likes || [];\n        // Remove from likes\n        likes = likes.filter((id)=>id !== userId);\n        await db.query(`\n      UPDATE threads \n      SET likes = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `, [\n            JSON.stringify(likes),\n            threadId\n        ]);\n        return await getThreadById(threadId);\n    } catch (error) {\n        console.error(\"Error unliking thread:\", error);\n        throw error;\n    }\n};\nconst dislikeThread = async (threadId, userId)=>{\n    try {\n        const thread = await getThreadById(threadId);\n        if (!thread) {\n            throw new Error(\"Thread not found\");\n        }\n        let likes = thread.likes || [];\n        let dislikes = thread.dislikes || [];\n        // Remove from likes if present\n        likes = likes.filter((id)=>id !== userId);\n        // Add to dislikes if not already present\n        if (!dislikes.includes(userId)) {\n            dislikes.push(userId);\n        }\n        await db.query(`\n      UPDATE threads \n      SET likes = ?, dislikes = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `, [\n            JSON.stringify(likes),\n            JSON.stringify(dislikes),\n            threadId\n        ]);\n        return await getThreadById(threadId);\n    } catch (error) {\n        console.error(\"Error disliking thread:\", error);\n        throw error;\n    }\n};\nconst undislikeThread = async (threadId, userId)=>{\n    try {\n        const thread = await getThreadById(threadId);\n        if (!thread) {\n            throw new Error(\"Thread not found\");\n        }\n        let dislikes = thread.dislikes || [];\n        // Remove from dislikes\n        dislikes = dislikes.filter((id)=>id !== userId);\n        await db.query(`\n      UPDATE threads \n      SET dislikes = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE id = ?\n    `, [\n            JSON.stringify(dislikes),\n            threadId\n        ]);\n        return await getThreadById(threadId);\n    } catch (error) {\n        console.error(\"Error undisliking thread:\", error);\n        throw error;\n    }\n};\nconst searchThreads = async (query, options = {})=>{\n    const { limit = 50, offset = 0 } = options;\n    try {\n        const result = await db.query(`\n      SELECT \n        t.id, t.author_id, t.content, t.parent_id, t.group_id, t.topic_day_id,\n        t.visibility, t.attachments, t.likes, t.dislikes, t.created_at, t.updated_at,\n        u.username, u.display_name, u.avatar\n      FROM threads t\n      JOIN users u ON t.author_id = u.id\n      WHERE t.content LIKE ? AND t.parent_id IS NULL\n      ORDER BY t.created_at DESC\n      LIMIT ? OFFSET ?\n    `, [\n            `%${query}%`,\n            limit,\n            offset\n        ]);\n        return result.rows.map((thread)=>({\n                ...thread,\n                likes: JSON.parse(thread.likes || \"[]\"),\n                dislikes: JSON.parse(thread.dislikes || \"[]\"),\n                attachments: JSON.parse(thread.attachments || \"[]\"),\n                author: {\n                    id: thread.author_id,\n                    username: thread.username,\n                    displayName: thread.display_name,\n                    avatar: thread.avatar\n                },\n                replies: [],\n                comments: []\n            }));\n    } catch (error) {\n        console.error(\"Error searching threads:\", error);\n        throw error;\n    }\n};\nmodule.exports = {\n    createThread,\n    getThreadById,\n    getAllThreads,\n    getThreadReplies,\n    updateThread,\n    deleteThread,\n    likeThread,\n    unlikeThread,\n    dislikeThread,\n    undislikeThread,\n    searchThreads\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/threads/db.js\n");

/***/ }),

/***/ "(rsc)/./app/api/threads/route.ts":
/*!**********************************!*\
  !*** ./app/api/threads/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nconst threadsDb = __webpack_require__(/*! ./db */ \"(rsc)/./app/api/threads/db.js\");\nconst authDb = __webpack_require__(/*! ../auth/db */ \"(rsc)/./app/api/auth/db.js\");\n// GET - Get all threads\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\");\n        const offset = parseInt(searchParams.get(\"offset\") || \"0\");\n        const userId = searchParams.get(\"userId\");\n        const threads = await threadsDb.getAllThreads({\n            limit,\n            offset,\n            userId: userId || null\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            threads: threads\n        });\n    } catch (error) {\n        console.error(\"Error fetching threads:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// POST - Create new thread or reply\nasync function POST(request) {\n    try {\n        // Check authentication\n        const authToken = request.cookies.get(\"auth-token\")?.value;\n        if (!authToken) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        const decoded = authDb.verifyToken(authToken);\n        if (!decoded) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Invalid or expired token\"\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { content, visibility, attachments, parentId, groupId, topicDayId } = body;\n        // Validation\n        if (!content || content.trim().length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Content is required\"\n            }, {\n                status: 400\n            });\n        }\n        if (content.length > 500) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Content must be 500 characters or less\"\n            }, {\n                status: 400\n            });\n        }\n        // Create thread or reply\n        const newThread = await threadsDb.createThread({\n            authorId: decoded.id,\n            content: content.trim(),\n            visibility: visibility || \"public\",\n            parentId: parentId || null,\n            attachments: attachments || [],\n            groupId: groupId || null,\n            topicDayId: topicDayId || null\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            thread: newThread,\n            message: parentId ? \"Reply created successfully\" : \"Thread created successfully\"\n        });\n    } catch (error) {\n        console.error(\"Error creating thread:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PUT - Like/Unlike thread\nasync function PUT(request) {\n    try {\n        // Check authentication\n        const authToken = request.cookies.get(\"auth-token\")?.value;\n        if (!authToken) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        const decoded = authDb.verifyToken(authToken);\n        if (!decoded) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Invalid or expired token\"\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { threadId, action } = body;\n        if (!threadId || !action) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Thread ID and action are required\"\n            }, {\n                status: 400\n            });\n        }\n        let result;\n        switch(action){\n            case \"like\":\n                result = await threadsDb.likeThread(threadId, decoded.id);\n                break;\n            case \"unlike\":\n                result = await threadsDb.unlikeThread(threadId, decoded.id);\n                break;\n            case \"dislike\":\n                result = await threadsDb.dislikeThread(threadId, decoded.id);\n                break;\n            case \"undislike\":\n                result = await threadsDb.undislikeThread(threadId, decoded.id);\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"Invalid action. Use: like, unlike, dislike, or undislike\"\n                }, {\n                    status: 400\n                });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            thread: result,\n            message: `Thread ${action}d successfully`\n        });\n    } catch (error) {\n        console.error(\"Error updating thread:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n// DELETE - Delete thread\nasync function DELETE(request) {\n    try {\n        // Check authentication\n        const authToken = request.cookies.get(\"auth-token\")?.value;\n        if (!authToken) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Authentication required\"\n            }, {\n                status: 401\n            });\n        }\n        const decoded = authDb.verifyToken(authToken);\n        if (!decoded) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Invalid or expired token\"\n            }, {\n                status: 401\n            });\n        }\n        const { searchParams } = new URL(request.url);\n        const threadId = searchParams.get(\"id\");\n        if (!threadId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Thread ID is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Check if user owns the thread\n        const thread = await threadsDb.getThreadById(threadId);\n        if (!thread) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Thread not found\"\n            }, {\n                status: 404\n            });\n        }\n        if (thread.author_id !== decoded.id) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"You can only delete your own threads\"\n            }, {\n                status: 403\n            });\n        }\n        await threadsDb.deleteThread(threadId);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Thread deleted successfully\"\n        });\n    } catch (error) {\n        console.error(\"Error deleting thread:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/threads/route.ts\n");

/***/ }),

/***/ "(rsc)/./database/db.js":
/*!************************!*\
  !*** ./database/db.js ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Simplified database configuration for SQLite\n\nconst sqlite3 = (__webpack_require__(/*! sqlite3 */ \"sqlite3\").verbose)();\nconst path = __webpack_require__(/*! path */ \"path\");\n// Create database file in project root\nconst dbPath = path.join(process.cwd(), \"threads_app.db\");\n// Create database connection\nlet db = null;\nconst initDatabase = ()=>{\n    if (db) return db;\n    db = new sqlite3.Database(dbPath, (err)=>{\n        if (err) {\n            console.error(\"❌ Error opening database:\", err.message);\n        } else {\n            console.log(\"✅ Connected to SQLite database\");\n        }\n    });\n    // Enable foreign keys\n    db.run(\"PRAGMA foreign_keys = ON\");\n    return db;\n};\n// Database helper functions\nconst database = {\n    // Initialize database connection\n    init: ()=>{\n        return initDatabase();\n    },\n    // Execute a query\n    query: (sql, params = [])=>{\n        const db = initDatabase();\n        return new Promise((resolve, reject)=>{\n            if (sql.trim().toUpperCase().startsWith(\"SELECT\")) {\n                db.all(sql, params, (err, rows)=>{\n                    if (err) {\n                        console.error(\"❌ Database query error:\", err);\n                        reject(err);\n                    } else {\n                        resolve({\n                            success: true,\n                            rows\n                        });\n                    }\n                });\n            } else {\n                db.run(sql, params, function(err) {\n                    if (err) {\n                        console.error(\"❌ Database query error:\", err);\n                        reject(err);\n                    } else {\n                        resolve({\n                            success: true,\n                            rowCount: this.changes,\n                            lastID: this.lastID,\n                            rows: this.lastID ? [\n                                {\n                                    id: this.lastID\n                                }\n                            ] : []\n                        });\n                    }\n                });\n            }\n        });\n    },\n    // Get a single row\n    get: (sql, params = [])=>{\n        const db = initDatabase();\n        return new Promise((resolve, reject)=>{\n            db.get(sql, params, (err, row)=>{\n                if (err) {\n                    console.error(\"❌ Database query error:\", err);\n                    reject(err);\n                } else {\n                    resolve({\n                        success: true,\n                        rows: row ? [\n                            row\n                        ] : []\n                    });\n                }\n            });\n        });\n    },\n    // Close database connection\n    close: ()=>{\n        if (db) {\n            return new Promise((resolve)=>{\n                db.close((err)=>{\n                    if (err) {\n                        console.error(\"❌ Error closing database:\", err.message);\n                    } else {\n                        console.log(\"✅ Database connection closed\");\n                    }\n                    db = null;\n                    resolve();\n                });\n            });\n        }\n        return Promise.resolve();\n    },\n    // Transaction helper\n    transaction: async (callback)=>{\n        const db = initDatabase();\n        try {\n            await database.query(\"BEGIN TRANSACTION\");\n            const result = await callback(database);\n            await database.query(\"COMMIT\");\n            return result;\n        } catch (error) {\n            await database.query(\"ROLLBACK\");\n            throw error;\n        }\n    }\n};\nmodule.exports = database;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9kYXRhYmFzZS9kYi5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrQ0FBK0M7O0FBQy9DLE1BQU1BLFVBQVVDLHVEQUEwQjtBQUMxQyxNQUFNRSxPQUFPRixtQkFBT0EsQ0FBQztBQUVyQix1Q0FBdUM7QUFDdkMsTUFBTUcsU0FBU0QsS0FBS0UsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLElBQUk7QUFFeEMsNkJBQTZCO0FBQzdCLElBQUlDLEtBQUs7QUFFVCxNQUFNQyxlQUFlO0lBQ25CLElBQUlELElBQUksT0FBT0E7SUFFZkEsS0FBSyxJQUFJUixRQUFRVSxRQUFRLENBQUNOLFFBQVEsQ0FBQ087UUFDakMsSUFBSUEsS0FBSztZQUNQQyxRQUFRQyxLQUFLLENBQUMsNkJBQTZCRixJQUFJRyxPQUFPO1FBQ3hELE9BQU87WUFDTEYsUUFBUUcsR0FBRyxDQUFDO1FBQ2Q7SUFDRjtJQUVBLHNCQUFzQjtJQUN0QlAsR0FBR1EsR0FBRyxDQUFDO0lBRVAsT0FBT1I7QUFDVDtBQUVBLDRCQUE0QjtBQUM1QixNQUFNUyxXQUFXO0lBQ2YsaUNBQWlDO0lBQ2pDQyxNQUFNO1FBQ0osT0FBT1Q7SUFDVDtJQUVBLGtCQUFrQjtJQUNsQlUsT0FBTyxDQUFDQyxLQUFLQyxTQUFTLEVBQUU7UUFDdEIsTUFBTWIsS0FBS0M7UUFDWCxPQUFPLElBQUlhLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDM0IsSUFBSUosSUFBSUssSUFBSSxHQUFHQyxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxXQUFXO2dCQUNqRG5CLEdBQUdvQixHQUFHLENBQUNSLEtBQUtDLFFBQVEsQ0FBQ1YsS0FBS2tCO29CQUN4QixJQUFJbEIsS0FBSzt3QkFDUEMsUUFBUUMsS0FBSyxDQUFDLDJCQUEyQkY7d0JBQ3pDYSxPQUFPYjtvQkFDVCxPQUFPO3dCQUNMWSxRQUFROzRCQUFFTyxTQUFTOzRCQUFNRDt3QkFBSztvQkFDaEM7Z0JBQ0Y7WUFDRixPQUFPO2dCQUNMckIsR0FBR1EsR0FBRyxDQUFDSSxLQUFLQyxRQUFRLFNBQVNWLEdBQUc7b0JBQzlCLElBQUlBLEtBQUs7d0JBQ1BDLFFBQVFDLEtBQUssQ0FBQywyQkFBMkJGO3dCQUN6Q2EsT0FBT2I7b0JBQ1QsT0FBTzt3QkFDTFksUUFBUTs0QkFDTk8sU0FBUzs0QkFDVEMsVUFBVSxJQUFJLENBQUNDLE9BQU87NEJBQ3RCQyxRQUFRLElBQUksQ0FBQ0EsTUFBTTs0QkFDbkJKLE1BQU0sSUFBSSxDQUFDSSxNQUFNLEdBQUc7Z0NBQUM7b0NBQUVDLElBQUksSUFBSSxDQUFDRCxNQUFNO2dDQUFDOzZCQUFFLEdBQUcsRUFBRTt3QkFDaEQ7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxtQkFBbUI7SUFDbkJFLEtBQUssQ0FBQ2YsS0FBS0MsU0FBUyxFQUFFO1FBQ3BCLE1BQU1iLEtBQUtDO1FBQ1gsT0FBTyxJQUFJYSxRQUFRLENBQUNDLFNBQVNDO1lBQzNCaEIsR0FBRzJCLEdBQUcsQ0FBQ2YsS0FBS0MsUUFBUSxDQUFDVixLQUFLeUI7Z0JBQ3hCLElBQUl6QixLQUFLO29CQUNQQyxRQUFRQyxLQUFLLENBQUMsMkJBQTJCRjtvQkFDekNhLE9BQU9iO2dCQUNULE9BQU87b0JBQ0xZLFFBQVE7d0JBQUVPLFNBQVM7d0JBQU1ELE1BQU1PLE1BQU07NEJBQUNBO3lCQUFJLEdBQUcsRUFBRTtvQkFBQztnQkFDbEQ7WUFDRjtRQUNGO0lBQ0Y7SUFFQSw0QkFBNEI7SUFDNUJDLE9BQU87UUFDTCxJQUFJN0IsSUFBSTtZQUNOLE9BQU8sSUFBSWMsUUFBUSxDQUFDQztnQkFDbEJmLEdBQUc2QixLQUFLLENBQUMsQ0FBQzFCO29CQUNSLElBQUlBLEtBQUs7d0JBQ1BDLFFBQVFDLEtBQUssQ0FBQyw2QkFBNkJGLElBQUlHLE9BQU87b0JBQ3hELE9BQU87d0JBQ0xGLFFBQVFHLEdBQUcsQ0FBQztvQkFDZDtvQkFDQVAsS0FBSztvQkFDTGU7Z0JBQ0Y7WUFDRjtRQUNGO1FBQ0EsT0FBT0QsUUFBUUMsT0FBTztJQUN4QjtJQUVBLHFCQUFxQjtJQUNyQmUsYUFBYSxPQUFPQztRQUNsQixNQUFNL0IsS0FBS0M7UUFDWCxJQUFJO1lBQ0YsTUFBTVEsU0FBU0UsS0FBSyxDQUFDO1lBQ3JCLE1BQU1xQixTQUFTLE1BQU1ELFNBQVN0QjtZQUM5QixNQUFNQSxTQUFTRSxLQUFLLENBQUM7WUFDckIsT0FBT3FCO1FBQ1QsRUFBRSxPQUFPM0IsT0FBTztZQUNkLE1BQU1JLFNBQVNFLEtBQUssQ0FBQztZQUNyQixNQUFNTjtRQUNSO0lBQ0Y7QUFDRjtBQUVBNEIsT0FBT0MsT0FBTyxHQUFHekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlYWRzLWFwcC1iZWV0Ly4vZGF0YWJhc2UvZGIuanM/NjRhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTaW1wbGlmaWVkIGRhdGFiYXNlIGNvbmZpZ3VyYXRpb24gZm9yIFNRTGl0ZVxuY29uc3Qgc3FsaXRlMyA9IHJlcXVpcmUoJ3NxbGl0ZTMnKS52ZXJib3NlKCk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG4vLyBDcmVhdGUgZGF0YWJhc2UgZmlsZSBpbiBwcm9qZWN0IHJvb3RcbmNvbnN0IGRiUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndGhyZWFkc19hcHAuZGInKTtcblxuLy8gQ3JlYXRlIGRhdGFiYXNlIGNvbm5lY3Rpb25cbmxldCBkYiA9IG51bGw7XG5cbmNvbnN0IGluaXREYXRhYmFzZSA9ICgpID0+IHtcbiAgaWYgKGRiKSByZXR1cm4gZGI7XG4gIFxuICBkYiA9IG5ldyBzcWxpdGUzLkRhdGFiYXNlKGRiUGF0aCwgKGVycikgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBvcGVuaW5nIGRhdGFiYXNlOicsIGVyci5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ+KchSBDb25uZWN0ZWQgdG8gU1FMaXRlIGRhdGFiYXNlJyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBFbmFibGUgZm9yZWlnbiBrZXlzXG4gIGRiLnJ1bignUFJBR01BIGZvcmVpZ25fa2V5cyA9IE9OJyk7XG4gIFxuICByZXR1cm4gZGI7XG59O1xuXG4vLyBEYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zXG5jb25zdCBkYXRhYmFzZSA9IHtcbiAgLy8gSW5pdGlhbGl6ZSBkYXRhYmFzZSBjb25uZWN0aW9uXG4gIGluaXQ6ICgpID0+IHtcbiAgICByZXR1cm4gaW5pdERhdGFiYXNlKCk7XG4gIH0sXG5cbiAgLy8gRXhlY3V0ZSBhIHF1ZXJ5XG4gIHF1ZXJ5OiAoc3FsLCBwYXJhbXMgPSBbXSkgPT4ge1xuICAgIGNvbnN0IGRiID0gaW5pdERhdGFiYXNlKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChzcWwudHJpbSgpLnRvVXBwZXJDYXNlKCkuc3RhcnRzV2l0aCgnU0VMRUNUJykpIHtcbiAgICAgICAgZGIuYWxsKHNxbCwgcGFyYW1zLCAoZXJyLCByb3dzKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIERhdGFiYXNlIHF1ZXJ5IGVycm9yOicsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSh7IHN1Y2Nlc3M6IHRydWUsIHJvd3MgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRiLnJ1bihzcWwsIHBhcmFtcywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIERhdGFiYXNlIHF1ZXJ5IGVycm9yOicsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSh7IFxuICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICByb3dDb3VudDogdGhpcy5jaGFuZ2VzLFxuICAgICAgICAgICAgICBsYXN0SUQ6IHRoaXMubGFzdElELFxuICAgICAgICAgICAgICByb3dzOiB0aGlzLmxhc3RJRCA/IFt7IGlkOiB0aGlzLmxhc3RJRCB9XSA6IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8vIEdldCBhIHNpbmdsZSByb3dcbiAgZ2V0OiAoc3FsLCBwYXJhbXMgPSBbXSkgPT4ge1xuICAgIGNvbnN0IGRiID0gaW5pdERhdGFiYXNlKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRiLmdldChzcWwsIHBhcmFtcywgKGVyciwgcm93KSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRGF0YWJhc2UgcXVlcnkgZXJyb3I6JywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHsgc3VjY2VzczogdHJ1ZSwgcm93czogcm93ID8gW3Jvd10gOiBbXSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gQ2xvc2UgZGF0YWJhc2UgY29ubmVjdGlvblxuICBjbG9zZTogKCkgPT4ge1xuICAgIGlmIChkYikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGRiLmNsb3NlKChlcnIpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgY2xvc2luZyBkYXRhYmFzZTonLCBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfinIUgRGF0YWJhc2UgY29ubmVjdGlvbiBjbG9zZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGIgPSBudWxsO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9LFxuXG4gIC8vIFRyYW5zYWN0aW9uIGhlbHBlclxuICB0cmFuc2FjdGlvbjogYXN5bmMgKGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgZGIgPSBpbml0RGF0YWJhc2UoKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZGF0YWJhc2UucXVlcnkoJ0JFR0lOIFRSQU5TQUNUSU9OJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsYmFjayhkYXRhYmFzZSk7XG4gICAgICBhd2FpdCBkYXRhYmFzZS5xdWVyeSgnQ09NTUlUJyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhd2FpdCBkYXRhYmFzZS5xdWVyeSgnUk9MTEJBQ0snKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBkYXRhYmFzZTtcbiJdLCJuYW1lcyI6WyJzcWxpdGUzIiwicmVxdWlyZSIsInZlcmJvc2UiLCJwYXRoIiwiZGJQYXRoIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJkYiIsImluaXREYXRhYmFzZSIsIkRhdGFiYXNlIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibWVzc2FnZSIsImxvZyIsInJ1biIsImRhdGFiYXNlIiwiaW5pdCIsInF1ZXJ5Iiwic3FsIiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0cmltIiwidG9VcHBlckNhc2UiLCJzdGFydHNXaXRoIiwiYWxsIiwicm93cyIsInN1Y2Nlc3MiLCJyb3dDb3VudCIsImNoYW5nZXMiLCJsYXN0SUQiLCJpZCIsImdldCIsInJvdyIsImNsb3NlIiwidHJhbnNhY3Rpb24iLCJjYWxsYmFjayIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./database/db.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/semver","vendor-chunks/bcryptjs","vendor-chunks/jsonwebtoken","vendor-chunks/lodash.includes","vendor-chunks/jws","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/lodash.isplainobject","vendor-chunks/ms","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/buffer-equal-constant-time"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Froute&page=%2Fapi%2Fthreads%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Froute.ts&appDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Friciboy%2FDesktop%2Fgaladarbinsskola&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();